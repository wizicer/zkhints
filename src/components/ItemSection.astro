---
import { Image } from "astro:assets";
import constructionIcon from "../assets/icons/construction.svg";
import type { ImageMetadata } from "astro";
import favoriteIcon from "../assets/icons/star.svg";
import favoriteFilledIcon from "../assets/icons/star-filled.svg";

export interface Item {
  id: string;
  title: string;
  description?: string;
  image?: ImageMetadata;
  construction?: boolean;
}

interface Props {
  title: string;
  items: Item[];
}

const { title, items } = Astro.props;
---

<div class="mb-8">
  <h2 class="category item mt-8 font-medium text-lg border-b pb-1">
    {title}
  </h2>
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mt-4">
    {
      items.map((item) => (
        <a
          href={`/${item.id}`}
          class="favorite-item-container overflow-hidden block p-4 hover:text-blue-600 transition-colors text-gray-700 bg-white rounded-md shadow-sm border border-gray-100 hover:shadow-md hover:border-gray-200 transition-all relative"
        >
          {item.construction && (
            <div class="absolute top-2 right-5 transform translate-x-1/3 -translate-y-1/3 z-10">
              <div class="bg-yellow-400 text-xs font-bold px-2 py-1 rounded-full shadow-md flex items-center">
                <Image src={constructionIcon} alt="Construction" width="16" height="16" />
                <span class="ml-1">WIP</span>
              </div>
            </div>
          )}
          <div class="favorite-ribbon hidden absolute top-0 right-0">
            <div class="w-32 h-6 absolute top-1 -right-11">
              <div class="h-full w-full bg-indigo-500 text-white text-center transform rotate-45">
                â˜…
              </div>
            </div>
          </div>
          <div class="flex items-start gap-4">
            {item.image && (
              <Image
                src={item.image}
                alt={item.title}
                width={96}
                height={96}
                class="w-24 h-24 object-contain"
              />
            )}
            <div class="flex-1">
              <div class="mb-2">
                <span class="font-medium block">{item.title}</span>
                <code class="text-xs bg-gray-100 px-1 py-0.5 rounded">{item.id}</code>
              </div>
              {item.description && <p class="text-sm text-gray-600">{item.description}</p>}
            </div>
          </div>
          <button
            class="favorite-toggle absolute top-2 right-2 w-8 h-8 rounded-full bg-white bg-opacity-80 shadow-sm flex items-center justify-center z-20 opacity-0 hover:opacity-100 transition-opacity"
            data-item-id={item.id}
          >
            <Image
              src={favoriteIcon}
              alt="Add to favorites"
              width="16"
              height="16"
              class="favorite-icon"
            />
            <Image
              src={favoriteFilledIcon}
              alt="Remove from favorites"
              width="16"
              height="16"
              class="favorite-filled-icon hidden"
            />
          </button>
        </a>
      ))
    }
  </div>
</div>

<script>
  // Initialize favorites from localStorage
  let favorites = new Set();
  let loaded = false;

  // Load favorites from localStorage
  function loadFavorites() {
    try {
      const storedFavorites = localStorage.getItem("zkHintsFavorites");
      if (storedFavorites) {
        favorites = new Set(JSON.parse(storedFavorites));
      }
    } catch (error) {
      console.error("Error loading favorites:", error);
    }
  }

  // Save favorites to localStorage
  function saveFavorites() {
    try {
      localStorage.setItem("zkHintsFavorites", JSON.stringify([...favorites]));
    } catch (error) {
      console.error("Error saving favorites:", error);
    }
  }

  // Update UI to reflect favorite status
  function updateFavoriteUI(itemId: string, isFavorite: boolean) {
    document.querySelectorAll(`[data-item-id="${itemId}"]`).forEach((button) => {
      const container = button.closest(".favorite-item-container");
      if (!container) return;

      const ribbon = container.querySelector(".favorite-ribbon");
      const emptyIcon = button.querySelector(".favorite-icon");
      const filledIcon = button.querySelector(".favorite-filled-icon");

      if (isFavorite) {
        ribbon?.classList.remove("hidden");
        emptyIcon?.classList.add("hidden");
        filledIcon?.classList.remove("hidden");
      } else {
        ribbon?.classList.add("hidden");
        emptyIcon?.classList.remove("hidden");
        filledIcon?.classList.add("hidden");
      }
    });
  }

  // Initialize the UI
  function initializeFavorites() {
    if (loaded) return;
    loaded = true;
    loadFavorites();

    // Set initial state for all items
    document.querySelectorAll(".favorite-toggle").forEach((button) => {
      const itemId = button.getAttribute("data-item-id");
      if (itemId) {
        updateFavoriteUI(itemId, favorites.has(itemId));
      }
    });

    // Add click handlers
    document.querySelectorAll(".favorite-toggle").forEach((button) => {
      button.addEventListener("click", (e) => {
        e.preventDefault();
        e.stopPropagation();
        console.log("Favorite toggle clicked");

        const itemId = button.getAttribute("data-item-id");
        if (!itemId) return;

        const isFavorite = favorites.has(itemId);

        if (isFavorite) {
          favorites.delete(itemId);
        } else {
          favorites.add(itemId);
        }

        updateFavoriteUI(itemId, !isFavorite);
        saveFavorites();
      });
    });
  }

  // Run initialization when DOM is ready
  document.addEventListener("DOMContentLoaded", initializeFavorites);

  // Also run when the script is executed (for Astro islands)
  if (document.readyState === "complete" || document.readyState === "interactive") {
    setTimeout(initializeFavorites, 1);
  }
</script>

<style>
  .favorite-item-container:hover .favorite-toggle {
    opacity: 1;
  }

  .favorite-ribbon {
    z-index: 5;
  }
</style>
