---
import Layout from '../layouts/Layout.astro';
import CheatsheetHeader from '../components/CheatsheetHeader';
import CheatsheetSection from '../components/CheatsheetSection';

// JSX Basics
const jsxItems = [
  {
    title: "JSX Syntax",
    code: `// JSX
const element = <h1>Hello, world!</h1>;

// Compiled to
const element = React.createElement(
  'h1',
  null,
  'Hello, world!'
);`,
    description: "JSX is a syntax extension for JavaScript"
  },
  {
    title: "Expressions in JSX",
    code: `const name = 'Josh';
const element = <h1>Hello, {name}</h1>;`,
    description: "Use curly braces to embed expressions"
  },
  {
    title: "JSX Attributes",
    code: `const element = <img src={user.avatarUrl} />;
const element = <button className="btn">Click me</button>;`,
    description: "Use camelCase for attribute names"
  }
];

// Components & Props
const propsItems = [
  {
    title: "Functional Component",
    code: `function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}`,
    description: "Simple component defined as a function"
  },
  {
    title: "Class Component",
    code: `class Welcome extends React.Component {
  render() {
    return <h1>Hello, {this.props.name}</h1>;
  }
}`,
    description: "Component defined as a class"
  },
  {
    title: "Props",
    code: `// Parent component
<Welcome name="Sara" />

// Child component
function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}`,
    description: "Pass data from parent to child with props"
  }
];

// State & Lifecycle
const stateItems = [
  {
    title: "useState Hook",
    code: `import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);
  
  return (
    <div>
      <p>You clicked {count} times</p>
      <button onClick={() => setCount(count + 1)}>
        Click me
      </button>
    </div>
  );
}`,
    description: "Manage state in functional components"
  },
  {
    title: "Class Component State",
    code: `class Counter extends React.Component {
  constructor(props) {
    super(props);
    this.state = { count: 0 };
  }
  
  render() {
    return (
      <div>
        <p>You clicked {this.state.count} times</p>
        <button onClick={() => this.setState({
          count: this.state.count + 1
        })}>
          Click me
        </button>
      </div>
    );
  }
}`,
    description: "Manage state in class components"
  }
];

// Events
const eventsItems = [
  {
    title: "Event Handling",
    code: `<button onClick={handleClick}>
  Click me
</button>`,
    description: "React events use camelCase"
  },
  {
    title: "Passing Arguments",
    code: `<button onClick={(e) => handleClick(id, e)}>
  Delete
</button>

<button onClick={handleClick.bind(this, id)}>
  Delete
</button>`,
    description: "Pass parameters to event handlers"
  }
];

// Custom Hooks
const hooksItems = [
  {
    title: "Custom Hook",
    code: `// Creating a custom hook
function useFormInput(initialValue) {
  const [value, setValue] = useState(initialValue);
  
  function handleChange(e) {
    setValue(e.target.value);
  }
  
  return {
    value,
    onChange: handleChange
  };
}

// Using the custom hook
function Form() {
  const name = useFormInput('');
  const email = useFormInput('');
  
  return (
    <form>
      <input {...name} />
      <input {...email} />
    </form>
  );
}`,
    description: "Create reusable stateful logic"
  },
  {
    title: "useEffect Hook",
    code: `useEffect(() => {
  document.title = \`You clicked \${count} times\`;
  
  // Cleanup function (optional)
  return () => {
    document.title = 'React App';
  };
}, [count]); // Only re-run if count changes`,
    description: "Perform side effects in function components"
  }
];
---

<Layout>
  <CheatsheetHeader 
    title="React Cheatsheet" 
    description="Essential React concepts, hooks, and patterns" 
    category="JavaScript Framework"
    client:load
  />
  
  <div class="container mx-auto px-4 py-8">
    <CheatsheetSection title="JSX Basics" items={jsxItems} client:load />
    <CheatsheetSection title="Components & Props" items={propsItems} client:load />
    <CheatsheetSection title="State & Lifecycle" items={stateItems} client:load />
    <CheatsheetSection title="Events" items={eventsItems} client:load />
    <CheatsheetSection title="Custom Hooks" items={hooksItems} client:load />
  </div>
</Layout>
