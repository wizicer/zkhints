---
import Layout from '../layouts/Layout.astro';
import CheatsheetHeader from '../components/CheatsheetHeader';
import CheatsheetSection from '../components/CheatsheetSection';

// Basic Vue.js
const basicItems = [
  {
    title: "Vue Instance",
    code: `new Vue({
  el: '#app',
  data: { message: 'Hello' }
})`,
    note: "Creates a new Vue instance"
  },
  {
    title: "Directives",
    code: `<div v-if="condition">...</div>
<div v-else-if="condition">...</div>
<div v-else>...</div>
<div v-show="condition">...</div>
<div v-html="html">...</div>
<div v-text="text">...</div>
<div v-for="item in items">...</div>`,
    note: "Built-in directives"
  },
  {
    title: "Data Binding",
    code: `<div>{{ message }}</div>
<div v-bind:class="className"></div>
<div :class="className"></div>
<input v-model="message">`,
    note: "Different ways to bind data"
  }
];

// Computed Properties
const computedItems = [
  {
    title: "Basic Computed",
    code: `computed: {
  fullName() {
    return this.firstName + ' ' + this.lastName
  }
}`,
    note: "Computed properties are cached based on dependencies"
  },
  {
    title: "Computed with Setter",
    code: `computed: {
  fullName: {
    get() {
      return this.firstName + ' ' + this.lastName
    },
    set(newValue) {
      const names = newValue.split(' ')
      this.firstName = names[0]
      this.lastName = names[names.length - 1]
    }
  }
}`,
    note: "Computed properties with getters and setters"
  }
];

// Lifecycle Hooks
const lifecycleItems = [
  {
    title: "Creation Hooks",
    code: `beforeCreate() {
  // Called before instance is created
},
created() {
  // Called after instance is created
}`,
    note: "Hooks that are called during instance creation"
  },
  {
    title: "Mounting Hooks",
    code: `beforeMount() {
  // Called before initial render
},
mounted() {
  // Called after initial render
}`,
    note: "Hooks that are called during DOM mounting"
  },
  {
    title: "Updating Hooks",
    code: `beforeUpdate() {
  // Called when data changes
},
updated() {
  // Called after re-render
}`,
    note: "Hooks that are called during re-rendering"
  },
  {
    title: "Destruction Hooks",
    code: `beforeDestroy() {
  // Called before instance is destroyed
},
destroyed() {
  // Called after instance is destroyed
}`,
    note: "Hooks that are called during instance destruction"
  }
];

// Component Communication
const componentItems = [
  {
    title: "Props",
    code: `// Child Component
export default {
  props: {
    message: String,
    count: {
      type: Number,
      required: true,
      default: 0
    }
  }
}

// Parent Component
<child-component 
  :message="parentMsg"
  :count="parentCount"
/>`,
    note: "Pass data from parent to child"
  },
  {
    title: "Events",
    code: `// Child Component
this.$emit('increment', 5)

// Parent Component
<child-component 
  @increment="handleIncrement"
/>`,
    note: "Send events from child to parent"
  },
  {
    title: "Provide/Inject",
    code: `// Parent Component
provide() {
  return {
    theme: this.theme
  }
}

// Descendant Component
inject: ['theme']`,
    note: "Pass data deep into component tree"
  }
];
---

<Layout title="Vue.js Cheatsheet">
  <CheatsheetHeader 
    title="Vue.js Cheatsheet" 
    description="Essential Vue.js concepts, directives, and patterns" 
    category="JavaScript Framework"
    client:load
  />
  
  <div class="container mx-auto px-4 py-8">
    <CheatsheetSection title="Basic Vue.js" items={basicItems} client:load />
    <CheatsheetSection title="Computed Properties" items={computedItems} client:load />
    <CheatsheetSection title="Lifecycle Hooks" items={lifecycleItems} client:load />
    <CheatsheetSection title="Component Communication" items={componentItems} client:load />
  </div>
</Layout>
