---
import Layout from "../layouts/Layout.astro";
import CheatsheetSection from "../components/CheatsheetSection";
import { sections, recursive } from "../data/gnark";
---

<Layout id="gnark">
  <div class="container mx-auto px-4 py-8">
    <div class="mb-8">
      <p class="text-gray-700 mb-4">
        Gnark is a Go library for zero-knowledge proof circuits. This cheatsheet provides a quick
        reference for common operations and patterns.
      </p>
      <p class="text-gray-700 mb-4">
        <span class="font-semibold">Note:</span> In the code examples, <code
          class="bg-gray-100 px-1 py-0.5 rounded">Var</code
        > is used as an abbreviation for <code class="bg-gray-100 px-1 py-0.5 rounded"
          >frontend.Variable</code
        >.
      </p>
    </div>

    {
      sections.map((section) => (
        <div class="mt-12 mb-4">
          <h2 class="text-2xl font-bold text-gray-800 mb-2">{section.title}</h2>
          <p class="text-gray-700">{section.description}</p>
          <CheatsheetSection title="" items={section.items} defaultLanguage="go" client:load />
        </div>
      ))
    }

    <div class="mt-16 mb-4">
      <h2 class="text-2xl font-bold text-gray-800 mb-4">Recursive Proof Schemes</h2>
      <p class="text-gray-700 mb-6">
        Comparison of different recursive proof schemes with their performance characteristics.
      </p>
      <p class="text-gray-700 mb-6">
        Comparison is taken in MacBook Pro 13" M1 Pro with original test case in gnark repository.
      </p>
      <div class="overflow-x-auto">
        <table class="min-w-full bg-white border border-gray-300">
          <thead>
            <tr class="bg-gray-100">
              <th class="py-2 px-4 border-b border-r">Inner Scheme</th>
              <th class="py-2 px-4 border-b border-r">Outer Scheme</th>
              <th class="py-2 px-4 border-b border-r">Inner Curve</th>
              <th class="py-2 px-4 border-b border-r">Outer Curve</th>
              <th class="py-2 px-4 border-b border-r">Constraints</th>
              <th class="py-2 px-4 border-b border-r">Setup Size (MB)</th>
              <th class="py-2 px-4 border-b border-r">Pk Size (MB)</th>
              <th class="py-2 px-4 border-b border-r">Constraint Size (MB)</th>
              <th class="py-2 px-4 border-b">E2E Test Time (s)</th>
            </tr>
          </thead>
          <tbody>
            {
              recursive.map((scheme, index) => (
                <tr class={index % 2 === 0 ? "bg-gray-50" : "bg-white"}>
                  <td class="py-2 px-4 border-b border-r">{scheme.innerScheme}</td>
                  <td class="py-2 px-4 border-b border-r">{scheme.outerScheme}</td>
                  <td class="py-2 px-4 border-b border-r">{scheme.innerCurve}</td>
                  <td class="py-2 px-4 border-b border-r">{scheme.outerCurve}</td>
                  <td class="py-2 px-4 border-b border-r text-right">
                    {scheme.constraints.toLocaleString()}
                  </td>
                  <td class="py-2 px-4 border-b border-r text-right">
                    {scheme.setupSizeMB.toFixed(2)}
                  </td>
                  <td class="py-2 px-4 border-b border-r text-right">
                    {scheme.pkSizeMB.toFixed(2)}
                  </td>
                  <td class="py-2 px-4 border-b border-r text-right">
                    {scheme.constraintSizeMB.toFixed(2)}
                  </td>
                  <td class="py-2 px-4 border-b text-right">{scheme.e2eTestTimeS.toFixed(2)}</td>
                </tr>
              ))
            }
          </tbody>
        </table>
      </div>
    </div>
  </div>
</Layout>

<style>
  code {
    font-family: "Fira Code", monospace;
  }

  /* Custom styling for math formulas */
  .math-formula {
    font-family: "Cambria Math", "STIX Two Math", serif;
    font-style: italic;
  }
</style>
