---
import Layout from "../layouts/Layout.astro";
import { resourceList } from "../data/list";
import type { Resource, ResourceSection } from "../data/list";
import { Image } from "astro:assets";
import externalLinkIcon from "../assets/icons/external-link.svg";
import locationIcon from "../assets/icons/location.svg";
import calendarIcon from "../assets/icons/calendar.svg";

interface PathItem {
  params: { list: string };
  props: {
    resource: Resource;
  };
}

export function getStaticPaths() {
  const paths: PathItem[] = [];

  resourceList.forEach((resource) => {
    paths.push({
      params: { list: resource.id },
      props: {
        resource,
      },
    });
  });

  return paths;
}

const { resource } = Astro.props;

// Function to check if an event is outdated
function isOutdated(outdatedDate: string | undefined): boolean {
  if (!outdatedDate) return false;

  const today = new Date();
  today.setHours(0, 0, 0, 0); // Set to beginning of day

  const outdated = new Date(outdatedDate);
  outdated.setHours(0, 0, 0, 0); // Set to beginning of day

  return outdated < today;
}

// Current date for comparison
const currentDate = new Date();
---

<Layout id={resource.id}>
  <div class="container mx-auto px-4 py-8">
    <!-- Table of Contents -->
    <div
      class="mb-8 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg shadow-lg overflow-hidden"
    >
      <div class="bg-gradient-to-r from-blue-600 to-indigo-600 px-6 py-4">
        <h2 class="text-xl font-bold text-white flex items-center">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="h-6 w-6 mr-2"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16M4 18h7"></path>
          </svg>
          Table of Contents
        </h2>
      </div>

      <div class="p-6">
        <ul class="grid grid-cols-1 md:grid-cols-2 gap-3">
          {
            resource.sections.map((section: ResourceSection, index) => (
              <li class="transform transition duration-200 hover:translate-x-1">
                <a
                  href={`#${section.id}`}
                  class="flex items-center p-3 rounded-md hover:bg-white group transition-all duration-200 hover:shadow-md"
                >
                  <span class="flex items-center justify-center w-8 h-8 mr-3 rounded-full bg-gradient-to-r from-blue-500 to-indigo-500 text-white text-lg">
                    {section.emoji}
                  </span>
                  <div class="flex flex-col">
                    <span class="font-medium text-gray-800 group-hover:text-blue-600">
                      {section.title}
                    </span>
                    {section.description && (
                      <span class="text-xs text-gray-500 truncate max-w-xs">
                        {section.description}
                      </span>
                    )}
                  </div>
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-4 w-4 ml-auto text-gray-400 group-hover:text-blue-500"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M9 5l7 7-7 7"
                    />
                  </svg>
                </a>
              </li>
            ))
          }
        </ul>
      </div>
    </div>

    <!-- Sections -->
    {
      resource.sections.map((section: ResourceSection) => (
        <div class="mb-12" id={section.id}>
          <div class="flex items-center mb-4">
            <span class="text-2xl mr-2">{section.emoji}</span>
            <h2 class="text-xl font-bold">{section.title}</h2>
          </div>

          {section.description && <p class="text-gray-600 mb-4">{section.description}</p>}

          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {section.links.map((link) => {
              const isEvent = "outdated" in link;
              const outdated = isEvent && isOutdated(link.outdated);
              return !isEvent ? (
                <div
                  class={`block p-4 bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow border-l-4 ${
                    link.recommended ? "border-blue-500" : "border-gray-200"
                  }`}
                >
                  <h3 class={`font-bold mb-2`}>
                    <a href={link.link} target="_blank" rel="noopener noreferrer" class="ml-1">
                      {link.title}
                      <Image
                        src={externalLinkIcon}
                        alt="External Link"
                        class="h-4 w-4 inline mb-1"
                      />
                    </a>
                    {link.recommended && (
                      <span class="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded">
                        Recommended
                      </span>
                    )}
                  </h3>
                  <p class="text-sm text-gray-600">{link.description}</p>
                  {link.seriesLinks && link.seriesLinks.length > 0 && (
                    <div class="mt-3 pt-2 border-t border-gray-100">
                      <div class="hidden md:block flex flex-wrap gap-2">
                        {link.seriesLinks.map((seriesLink, index) => (
                          <a
                            href={seriesLink.link}
                            target="_blank"
                            rel="noopener noreferrer"
                            class="has-tooltip inline-block px-2 py-1 mx-1 text-xs font-medium text-gray-700 hover:text-blue-600 border-b-2 border-gray-200 hover:border-blue-500 transition-colors"
                          >
                            {index + 1}
                            <span class="tooltip rounded shadow-lg py-1 px-3 border-1 border-gray-300 bg-gray-100 text-blue-500 -mt-8">
                              {seriesLink.title}
                            </span>
                          </a>
                        ))}
                      </div>
                      <div class="md:hidden block flex flex-wrap gap-2">
                        {link.seriesLinks.map((seriesLink, index) => (
                          <a
                            href={seriesLink.link}
                            target="_blank"
                            rel="noopener noreferrer"
                            class="flex items-center block px-2 py-1 text-xs font-medium text-gray-700 border-1 border-gray-200 rounded-md"
                          >
                            <span class="mr-2 border-1 border-blue-200 rounded-md px-1">
                              {index + 1}
                            </span>
                            <span>{seriesLink.title}</span>
                          </a>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              ) : (
                <div
                  class={`block p-4 bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow border-l-4 ${
                    outdated
                      ? "border-gray-300 opacity-60"
                      : link.recommended
                        ? "border-blue-500"
                        : "border-gray-200"
                  }`}
                >
                  <div class="flex justify-between items-start">
                    <h3 class={`font-bold mb-2 ${outdated ? "text-gray-500" : "text-gray-800"}`}>
                      {link.title}
                      <a href={link.link} target="_blank" rel="noopener noreferrer" class="ml-1">
                        <Image
                          src={externalLinkIcon}
                          alt="External Link"
                          class="h-4 w-4 inline mb-1"
                        />
                      </a>
                    </h3>
                    <div>
                      {link.recommended && !outdated && (
                        <span class="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded">
                          Recommended
                        </span>
                      )}
                      {outdated && (
                        <span class="bg-gray-100 text-gray-600 text-xs px-2 py-1 rounded">
                          Past event
                        </span>
                      )}
                    </div>
                  </div>
                  <p class={`text-sm ${outdated ? "text-gray-400" : "text-gray-600"}`}>
                    <a
                      href={`https://www.google.com/maps/place/${link.location}`}
                      target="_blank"
                      rel="noopener noreferrer"
                      class="flex items-center inline"
                    >
                      <Image src={locationIcon} alt="Location" class="h-4 w-4 inline" />
                      {link.location}
                    </a>

                    <br />
                    <Image src={calendarIcon} alt="Calendar" class="h-4 w-4 inline" />
                    {link.dateDescription}
                  </p>
                </div>
              );
            })}
          </div>
        </div>
      ))
    }

    <div class="mt-8">
      <a href="/" class="inline-flex items-center text-blue-600 hover:underline">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="h-5 w-5 mr-1"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
        </svg>
        Back to Cheatsheets
      </a>
    </div>
  </div>
</Layout>

<style>
  /* Smooth scrolling for anchor links */
  html {
    scroll-behavior: smooth;
  }

  /* Add some padding to account for fixed header if you have one */
  :target {
    scroll-margin-top: 2rem;
  }

  /* Back to top button styles */
  .back-to-top {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    background: linear-gradient(to right, #3b82f6, #6366f1);
    color: white;
    width: 3rem;
    height: 3rem;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
    z-index: 100;
  }

  .back-to-top.visible {
    opacity: 1;
    visibility: visible;
  }

  .back-to-top:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 15px rgba(0, 0, 0, 0.25);
  }
</style>

<script>
  // Back to top button functionality
  document.addEventListener("DOMContentLoaded", () => {
    const backToTopButton = document.createElement("a");
    backToTopButton.href = "#";
    backToTopButton.className = "back-to-top";
    backToTopButton.innerHTML = `
      <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7" />
      </svg>
    `;

    document.body.appendChild(backToTopButton);

    window.addEventListener("scroll", () => {
      if (window.pageYOffset > 300) {
        backToTopButton.classList.add("visible");
      } else {
        backToTopButton.classList.remove("visible");
      }
    });

    backToTopButton.addEventListener("click", (e) => {
      e.preventDefault();
      window.scrollTo({ top: 0, behavior: "smooth" });
    });
  });
</script>
